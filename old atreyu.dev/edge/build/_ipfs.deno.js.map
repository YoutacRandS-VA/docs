{
  "version": 3,
  "sources": ["../../../../atreyu/edge/lib/env-local.js", "../../../../atreyu/edge/lib/kvs-local.js", "../../../../atreyu/edge/lib/wait.js", "../../../../atreyu/edge/lib/env.js", "../../../../atreyu/app/src/lib/url-logger.js", "../../../../atreyu/edge/lib/log.js", "../../../../atreyu/edge/lib/req.js", "../../../../atreyu/edge/handlers/_ipfs.js"],
  "sourceRoot": "./",
  "sourcesContent": ["const appKey = Deno.env.get('appKey')\nconst homeDir = Deno.env.get('HOME')\nconst envName = Deno.env.get('env')\n\nlet conf = JSON.parse(Deno.readTextFileSync(homeDir + `/.atreyu/${appKey}.json`))\nconf.env = envName\n// console.log(conf)\nexport function getEnv (keys) {\n  const env = { }\n\n  keys.forEach(key => {\n    env[key] = conf[key]\n  })\n\n  return env\n}\n", "const devCache = {}\n\nconst devKV = {\n  // TODO: NOT implemented yet clone array buffer etc. for later use devCache[key] = { value, metadata }\n  put: async (key, value, metadata = {}) => {},\n  get: (key) => devCache[key] ? devCache[key].value : null,\n  getWithMetadata: (key) => devCache[key] ? devCache[key] : { value: null, metadata: null }\n}\n\nexport function getKvStore (name) {\n  // if (!self[name]) {\n  // console.warn('using in memory kv fallback for dev')\n  return devKV\n  // }\n  // return self[name]\n}\n\n// async function handleRequest(request) {\n//   event.waitUntil(namespace.put('first-key', stats));\n//   const value = await namespace.get('first-key', 'json')\n//   if (value === null) {\n//     return new Response('Value not found', {status: 404})\n//   }\n//   return new Response(value)\n// }\n// return event.respondWith(handleRequest(event.request))\n", "let event\n\nexport const getWait = (newEvent) => {\n  if (newEvent) {\n    event = newEvent\n  }\n  return { waitUntil, event }\n}\n\nexport default function waitUntil (fn) {\n  if (event && event.waitUntil) {\n    return event.waitUntil(fn)\n  } else {\n    // console.warn('waiting called without event context')\n    return fn.catch(console.error)\n  }\n}\n", "export function getEnv (keys) {\n  const env = {}\n  keys.forEach(key => { env[key] = self[key] })\n\n  return env\n}\n", "export function urlLogger ({ missing, continued, scope, method, url, origUrl, cached, corsConf, body, duration, res, richConsole = true, verbose }) {\n  let badgeColor = ''\n\n  // console.log(url, origUrl, scope)\n  if (!verbose) {\n    if (cached && !missing && method === 'GET' && scope === 'ipfs') {\n      return\n    }\n\n    if (continued) {\n      return\n    }\n  }\n\n  if (richConsole) {\n    badgeColor = 'grey'\n\n    if (cached) {\n      badgeColor = '#099009'\n    } else if (cached === false) {\n      badgeColor = 'orange'\n    }\n\n    if (method === 'POST' || method === 'SET' ) {\n      badgeColor = 'rgb(170, 90, 217)'\n    } else if (method === 'PUT') {\n      badgeColor = 'rgb(174, 12, 226)'\n    } else if (method === 'CALL') {\n      badgeColor = 'rgb(236 124 248)'\n    } else if (method === 'PRELOAD') {\n      badgeColor = '#6ad4f6'\n    }\n  }\n\n  // TODO: move format url her : if (location) {\n  //   url = url.replace(location.origin, '')\n  //   // url = url.split('/').join('/ ')\n  // }\n\n  let displayUrl = ''\n  try {\n    if (typeof location !== 'undefined' && location.origin) { // TODO: deno --location <href> or Deno check\n      displayUrl = url.replace(location.origin, '')\n    } else {\n      displayUrl = url\n    }\n  } catch (_e) {\n    displayUrl = url\n  }\n\n  const edgeWorker = scope?.endsWith('edge-worker')\n\n  /* eslint-disable no-console */\n  if (richConsole) {\n    console.groupCollapsed(\n      `${(scope && edgeWorker) ? scope + ': ' : ''}%c${missing ? 'route error' : ''}%c${missing ? ' ' : ''}%c${method}%c %c ${displayUrl}`,\n      richConsole && missing ? `background-color:red;border-radius:3px;color:black;font-weight:bold;padding-left:2px;padding-right:2px` : '',\n      richConsole ? 'color:grey' : '',\n      richConsole ? `background-color:${badgeColor};border-radius:3px;color:black;font-weight:bold;padding-left:2px;padding-right:2px` : '',\n      richConsole ? 'color:grey' : '',\n      richConsole ? 'color:grey' : ''\n    )\n  } else {\n    console.log(`${(scope && edgeWorker) ? scope + ': ' : ''} ${missing ? 'route error' : ''} ${missing ? ' ' : ''} ${method}    ${displayUrl}`)\n  }\n\n  if (!edgeWorker && scope) {\n    console.info(scope)\n  }\n\n  if (cached === true) {\n    console.info('cache-status: hit')\n  } else if (cached === false) {\n    console.info('cache-status: miss')\n  }\n\n  if (origUrl && (url !== origUrl)) {\n    console.info('rewritten from: ', origUrl)\n  }\n\n  if (corsConf && corsConf.mode === 'proxy') {\n    console.info('proxied through: ' + corsConf.server)\n  }\n\n  if (typeof duration !== 'undefined') {\n    console.log(`duration: ${duration}ms`)\n  }\n\n  if (continued) {\n    console.info('continued processing of previous request')\n  }\n\n  if (body) {\n    console.info(body)\n  }\n\n  if (richConsole) {\n    console.groupEnd()\n  }\n  /* eslint-enable no-console */\n}\n", "import { getEnv } from './env.js'\n// eslint-disable-next-line\nimport { urlLogger } from '../../app/src/lib/url-logger.js'\n// TODO: sentry support for exceptions https://github.com/bustle/cf-sentry/blob/master/sentry.js\nlet envConf\n\n// TODO fix funciton call signature to json payload\nexport default async function ({ req, body, res, response, stats, duration = null, traceId }) {\n  if (!envConf) {\n    envConf = getEnv(['_ELASTIC_AUTH', 'ELASTIC_URL', 'env'])\n  }\n\n  let wokerName\n\n  if (response) {\n    let resp\n\n    if (response.then) {\n      resp = await response\n    } else {\n      resp = response\n    }\n\n    const headers = Object.fromEntries(resp.headers.entries())\n\n    res = {\n      headers,\n      status: resp.status\n    }\n\n    wokerName = headers['server']\n  }\n\n  if (envConf.env === 'dev') {\n    urlLogger({method: req.method, scope: wokerName || 'edge-worker', url: req.url.href, duration})\n  }\n\n  if (!envConf.ELASTIC_URL) {\n    return\n  }\n\n  // Delete for data laws\n  delete req.headers['cf-connecting-ip']\n  delete req.headers['x-real-ip']\n  delete req.headers['cf-access-jwt-assertion']\n  delete req.headers['Authorization']\n  delete req.headers['cookie']\n\n  let location\n  let cf\n  if (req.raw.cf) {\n    cf = { ...req.raw.cf, tlsClientAuth: undefined, tlsExportedAuthenticator: undefined, tlsCipher: undefined, clientTcpRtt: undefined, edgeRequestKeepAliveStatus: undefined, requestPriority: undefined }\n    if (!isNaN(parseFloat(cf?.latitude)) && !isNaN(parseFloat(cf?.longitude))) {\n      location = {\n        lat: parseFloat(cf?.latitude),\n        lon: parseFloat(cf?.longitude)\n      }\n    }\n  }\n\n  return fetch(envConf.ELASTIC_URL, {\n    method: 'POST',\n    headers: new Headers({\n      'Authorization': 'Basic ' + btoa(envConf._ELASTIC_AUTH),\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      time: (new Date()).toISOString(),\n\n      traceId,\n\n      stats,\n      cf,\n      duration,\n\n      method: req.method,\n      url: req.url.href,\n      path: req.url.pathname,\n\n      req: {\n        headers: req.headers,\n        location,\n        body\n      },\n\n      res\n    })\n  })\n  // TODO: error logging for elastic logging errors\n  // .then(ress => {\n  //   console.log(ress, envConf._ELASTIC_AUTH)\n  //   return ress\n  // })\n  // .catch(err => {\n  //   console.log(err)\n  //   return err\n  // })\n}\n", "import { getKvStore } from '/_kvs.js'\nimport { getWait } from './wait.js'\nimport log from './log.js'\n\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n// min, max are inclusive\nconst randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\nconst sleepRandom = () => {\n  const ms = randomInt(500, 1500)\n  // console.log(`error in fetch, retry in  ${ms / 1000} s ...`)\n  return sleep(ms)\n}\n\nexport default async function req (url, { method, body, headers: headersArg = {}, params, ttl, cacheKey, cacheNs, raw: rawArg, redirect = 'manual' } = {}) {\n  const { waitUntil, event } = getWait()\n  if (!method) {\n    method = body ? 'POST' : 'GET'\n  }\n  if (params) {\n    const paramsArray = []\n    Object.entries(params).forEach(([pKey, pValue]) => {\n      if (typeof pValue === 'object') {\n        paramsArray.push(`${pKey}=${JSON.stringify(pValue)}`)\n      } else {\n        paramsArray.push(`${pKey}=${pValue}`)\n      }\n    })\n    url += '?' + paramsArray.join('&')\n  }\n\n  const headers = new Headers(headersArg)\n\n  if (body && !headers.get('content-type')) {\n    headers.set('content-type', 'application/json')\n  }\n\n  if (body && headers.get('content-type') === 'application/json' && !(typeof body === 'string' || typeof body.getReader === 'function')) {\n    body = JSON.stringify(body)\n  }\n\n  let res\n  let kvs\n  if (cacheNs) {\n    if (!cacheKey) {\n      cacheKey = url\n    }\n\n    kvs = getKvStore(cacheNs)\n\n    if (headers.get('cache-control') !== 'no-cache') {\n      // TODO: streams are faster for non binaries\n      const kvRes = await kvs.getWithMetadata(cacheKey, { type: 'arrayBuffer', cacheTtl: 604800 }) //  1 week, TODO ttl for other? remember if the key needs to be changed this needs to be reduced and then increased again!\n\n      if (kvRes?.value) {\n        const options = {\n          headers: {\n            'cache-status': `edge-kv; hit${kvRes.metadata.expiration ? '; ttl=' + (kvRes.metadata.expiration - Math.floor(Date.now() / 1000)) : ''}`,\n            'content-type': kvRes.metadata.headers?.['content-type']\n          },\n          ok: true,\n          statusText: 'OK',\n          status: 200,\n          redirect: false\n        }\n\n        res = new Response(kvRes.value, options)\n      }\n    }\n  }\n\n  let retried\n  const reqStart = Date.now()\n  const wasCached = !!res\n  if (!wasCached) {\n    // console.log({ url, method, body, headers, length: body?.length })\n    res = await fetch(url, { method, body, headers, redirect }).catch(fetchError => ({ ok: false, error: fetchError }))\n    // console.log(res)\n\n    // if (!res.ok) { // FIXME: only on certain errors!!, disable option\n    //   console.log(res)\n    //   retried = {\n    //     status: res.status,\n    //     statusText: res.statusText,\n    //     text: res.text ? await res.text() : undefined,\n    //     error: res.error,\n    //     redirect: res.redirected\n    //   }\n    //   await sleepRandom()\n    //   res = await fetch(url, { method, body, headers, redirect }).catch(fetchError => ({ ok: false, error: fetchError }))\n    // }\n\n    if (res.ok && cacheNs) {\n      waitUntil((async () => {\n        await kvs.put(cacheKey, await res.clone().arrayBuffer(), {\n          expirationTtl: ttl, // s\n          metadata: {\n            expiration: ttl ? (Math.floor(Date.now() / 1000) + ttl) : undefined,\n            headers:  {\n              'content-type': res.headers.get('content-type'),\n              'content-length': res.headers.get('content-length'),\n              'last-modified': res.headers.get('last-modified')\n            }\n          }\n        })\n      })())\n    }\n  }\n  const duration = (Date.now() - reqStart)\n\n  let resHeaders\n  let json\n  let text\n  if (!rawArg && res.headers) {\n    resHeaders = Object.fromEntries(res.headers.entries())\n    if (!wasCached) {\n      let oldCacheStatus = res.headers.get('cache-status') || ''\n      if (oldCacheStatus) {\n        oldCacheStatus += ', '\n      }\n      resHeaders['cache-status'] = oldCacheStatus + 'edge-kv; miss' + (kvs ? '; stored' : '')\n    }\n\n    text = await res.text()\n    if (res.headers.get('content-type') === 'application/json') {\n      json = JSON.parse(text)\n    }\n  }\n\n  const baseResponse = {\n    headers: resHeaders,\n\n    duration,\n    ok: res.ok,\n    redirect: res.redirected,\n    status: res.status,\n    statusText: res.statusText,\n    retried,\n    error: res.error\n  }\n\n  if (event?._traceId) {\n    headers.set('traceId', event?._traceId)\n  }\n\n  // headers.set('referer', 'todo')\n  // headers.set('host', 'todo')\n\n  if (!wasCached) {\n    console.log(url)\n    waitUntil(log({\n      stats: event?._stats,\n      traceId: event?._traceId,\n      req: {\n        raw: {\n          cf: event?.request.cf\n        },\n        method,\n        url: new URL(url),\n        headers: Object.fromEntries(headers.entries())\n      },\n      res: { body: text, ...baseResponse},\n      body,\n      duration\n    }))\n  }\n\n  return {\n    raw: res,\n    json,\n    text,\n    ...baseResponse\n  }\n}\n", "import { getEnv } from '/_env.js'\nimport { getKvStore } from '/_kvs.js'\nimport doReq from '../lib/req.js'\n\nconst { IPFS_GATEWAY, env, appPath, appName } = getEnv(['IPFS_GATEWAY', 'env', 'appPath', 'appName'])\n\n// appPath only set in local develpemnt, but not in cloudflare\nconst ipfsGateway = IPFS_GATEWAY || (appPath ? 'http://127.0.0.1:8080' : 'https://cloudless.mypinata.cloud')\n\nconst ipfsMaps = {}\nconst kvs = getKvStore('ipfs')\n\nexport async function handler ({ req, app, waitUntil }) {\n  // TODO: header Server-Timing: miss, db;dur=53, app;dur=47.2\n  // Cache-Status: CacheName; param; param=value; param..., CacheName2; param; param...\n  // https://httptoolkit.tech/blog/status-targeted-caching-headers/\n  let url = ''\n  let ipfsPath\n  let revalidate = false\n  let disableCache = false\n\n  const pinName = env === 'prod' ? appName : appName + '_' + env\n  let kvPrefix = req.url.pathname.startsWith('/_ayu') ? 'ayu:' : pinName + ':'\n\n  let ipfsMap\n  let reqHash\n  let ipfsMapCacheStatus = ''\n\n  let appHash = req.url.pathname.startsWith('/_ayu') ? app.ayuHash : app.Hash\n  let path = req.url.pathname.startsWith('/_ayu') ? req.url.pathname.replace('/_ayu', '') : req.url.pathname\n  const preloadHeader = {}\n\n  if (path.startsWith('/ayu@')) {\n    if (path.startsWith('/ayu@latest')) {\n      // return (new Response(JSON.stringify({ version: app.ayuVersion, hash: app.rootFolderHash }), {\n      //   status: 200,\n      //   statusText: 'OK',\n      //   headers: {\n      //     'content-type': 'application/json'\n      //   }\n      // }))\n\n      const folderPath = path.replace('/ayu@latest', '')\n\n      reqHash = app.rootFolderHash + folderPath\n      ipfsPath = `/ipfs/${reqHash}`\n      url = ipfsGateway + ipfsPath\n    } else {\n      const pathArray = path.replace('/ayu@', '').split('/')\n      const version = pathArray.shift()\n      if (version === app.ayuVersion) {\n        reqHash = app.rootFolderHash + (pathArray.length ? '/' + pathArray.join('/') : '')\n        ipfsPath = `/ipfs/${reqHash}`\n        url = ipfsGateway + ipfsPath\n      } else {\n        // TODO: other version support\n      }\n    }\n  } else {\n    if (path.startsWith('/ipfs/')) {\n      // TODO: support ipfs folder requests\n      const maybeHash = path.replace('/ipfs/', '')\n      const ipfsPathParts = maybeHash.split('/')\n      if (ipfsPathParts.length === 1) {\n        reqHash = ipfsPathParts[0]\n        url = ipfsGateway + path\n        ipfsPath = path\n      } else {\n        // get ipfsmap, get hash\n        const folderHash = ipfsPathParts[0]\n        if (folderHash === app.ayuHash) {\n          kvPrefix = 'ayu:'\n          appHash = app.ayuHash\n          path = path.replace(`/ipfs/${folderHash}`, '')\n        } else if (folderHash === app.Hash) {\n          path = path.replace(`/ipfs/${folderHash}`, '')\n        } else {\n          return new Response('Root hash not pinned, please update your application', { status: 404, statusText: 'Not Found' })\n        }\n      }\n    }\n\n    if (!reqHash) {\n      if (path.endsWith('/')) {\n        path += 'index.html'\n        // preloadHeader.Link = '</build/dashboard-main.js>; rel=preload; as=script; crossorigin=anonymous, </build/shared/chunk-V22KRN5O.js>; rel=preload; as=script; crossorigin=anonymous, </build/shared/chunk-ZVJPVNPO.js>; rel=preload; as=script; crossorigin=anonymous, </build/base.css>; rel=preload; as=style' // nopush\n      } else if (!path) {\n        path = '/index.html'\n        // preloadHeader.Link = 'rel=preload; </build/dashboard-main.js>; as=script;' // nopush\n      }\n\n      if (\n        path.endsWith('/index.html') ||\n        path.endsWith('/ipfs-map.json') ||\n        path.endsWith('/service-worker.js') ||\n        req.url.pathname.startsWith('/_ayu/accounts')\n      ) {\n        disableCache = true\n      }\n\n      if (!ipfsMaps[appHash]) {\n        const ipfsMapPath = appHash + '/ipfs-map.json'\n        ipfsMaps[appHash] = await kvs.get(kvPrefix + ipfsMapPath, {type: 'json'})\n\n        if (!ipfsMaps[appHash]) {\n          ipfsMapCacheStatus = 'edge-mem; miss; stored, edge-kv; miss; stored'\n          const { json: mapReq, error, ok, status } = await doReq(ipfsGateway + '/ipfs/' + ipfsMapPath)\n\n          if (!ok) {\n            console.error({ error, status, path: ipfsMapPath, ipfsGateway })\n            ipfsMaps[appHash] = {}\n          } else {\n            ipfsMaps[appHash] = mapReq\n          }\n\n          if (ipfsMaps[appHash]) {\n            waitUntil(kvs.put(kvPrefix + ipfsMapPath, JSON.stringify(ipfsMaps[appHash])))\n          }\n        } else {\n          ipfsMapCacheStatus = 'edge-mem; miss; stored, edge-kv; hit'\n        }\n      } else {\n        ipfsMapCacheStatus = 'edge-mem; hit'\n      }\n      ipfsMap = ipfsMaps[appHash]\n      // console.log({ipfsMap, appHash, hash: app.Hash})\n\n      const existingHash = req.headers['if-none-match']?.replaceAll('\"', '').replace('W/', '')\n\n      if (!ipfsMap?.[path] && !path.endsWith('/ipfs-map.json')) {\n        return (new Response(null, { status: 404, statusText: 'Not Found'}))\n      }\n\n      if (!path.endsWith('/ipfs-map.json')) {\n        // TODO: we can also 304 uncahnged ipfs maps + need to poll for hash update in ayu updater\n        if (ipfsMap[path] === existingHash) {\n          return (new Response(null, { status: 304, statusText: 'Not Modified', 'cache-status': 'browser-cache; hit' }))\n        } else {\n          reqHash = ipfsMap[path]\n        }\n      }\n\n      revalidate = true\n      ipfsPath = `/ipfs/${appHash}${path}`\n      url = ipfsGateway + ipfsPath // `/ipfs/${reqHash}`\n    }\n  }\n\n  let response\n  if (path.endsWith('/ipfs-map.json')) {\n    reqHash = appHash + '/ipfs-map.json'\n    const bodyText = JSON.stringify(ipfsMaps[appHash])\n    response = new Response(bodyText, {\n      headers: {\n        'content-type': 'application/json',\n        'content-length': bodyText.length,\n        'cache-status': ipfsMapCacheStatus\n      }\n    })\n  } else {\n    response = (await doReq(url, { cacheKey: kvPrefix + reqHash, cacheNs: 'ipfs', raw: true })).raw\n  }\n\n  if (!response.ok) {\n    disableCache = true\n  }\n\n  let headers\n  let contentType\n  if (path.endsWith('.js')) {\n    contentType = 'application/javascript'\n  } else if (path.endsWith('.json')) {\n    contentType = 'application/json'\n  } else if (path.endsWith('.ts')) {\n    contentType = 'application/typescript'\n  }\n  if (disableCache) {\n    // TODO: But now that HTTP/1.1-conformant servers are widely deployed, there's no reason to ever use that max-age=0-and-must-revalidate combination \u2014 you should instead just use no-cache\n\n    headers = new Headers({\n      'content-type': contentType || response.headers.get('content-type'),\n      'content-length': response.headers.get('content-length'),\n      'etag': `\"${reqHash}\"`,\n      'cache-control': 'public, must-revalidate, max-age=0',\n      'x-ipfs-path': ipfsPath,\n      'server': 'ipfs-edge-worker',\n      'Service-Worker-Allowed': '/',\n      'cache-status': response.headers.get('cache-status') || 'edge-kv; miss',\n      ...preloadHeader\n    })\n  } else if (revalidate) {\n    headers = new Headers({\n      'content-type': contentType || response.headers.get('content-type'),\n      'content-length': response.headers.get('content-length'),\n      'etag': `\"${reqHash}\"`,\n      'cache-control': 'public, must-revalidate, max-age=' + (env === 'prod' ? 3 * 60 * 60 : 4), // prod 3h, other 4s\n      'x-ipfs-path': ipfsPath,\n      'server': 'ipfs-edge-worker',\n      'cache-status': response.headers.get('cache-status') || 'edge-kv; miss; stored',\n      ...preloadHeader\n    })\n  } else {\n    headers = new Headers({\n      'etag': `\"${reqHash}\"`,\n      'content-type': contentType || response.headers.get('content-type'),\n      'cache-control': 'public, max-age=29030400, immutable, private=Set-Cookie',\n      'content-length': response.headers.get('content-length'),\n      'last-modified': response.headers.get('last-modified'),\n      'x-ipfs-path': ipfsPath,\n      'server': 'ipfs-edge-worker',\n      'cache-status': response.headers.get('cache-status') || 'edge-kv; miss; stored',\n      ...preloadHeader\n    })\n  }\n\n  return (new Response(await response.arrayBuffer(), {\n    status: response.status,\n    statusText: response.statusText,\n    headers\n  }))\n}\n"],
  "mappings": "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",
  "names": ["env", "getEnv", "env", "req", "getEnv", "location", "waitUntil", "event", "kvs", "req", "waitUntil"]
}
